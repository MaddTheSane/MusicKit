<!DOCTYPE style-sheet PUBLIC "-//James Clark//DTD DSSSL Style Sheet//EN" [
<!ENTITY % html "IGNORE">
<![%html;[
<!ENTITY % print "IGNORE">
<!ENTITY docbook.dsl
         PUBLIC "-//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN"
         CDATA dsssl>
]]>
<!ENTITY % print "INCLUDE">
<![%print;[
<!ENTITY docbook.dsl 
         PUBLIC "-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN" 
         CDATA dsssl>
]]>
]>

<!-- 
  $Id$

  MusicKit customizations for documentation to appear in the Apple
  HelpViewer application, which is a specialised web browser.

  Leigh Smith <leigh@leighsmith.com>

  In this version we create all elements to make a set of Apple
  HelpViewer document.  In future versions, the Apple header
  specific stuff will be factored out and properly parameterised
  with hooks. 
 -->

<style-sheet>

<!--
;; ====================
;; customize the html stylesheet
;; ====================
-->
<style-specification id="html" use="docbook">
<style-specification-body> 

;; this is necessary because right now jadetex does not understand
;; symbolic entities, whereas things work well with numeric entities.
(declare-characteristic preserve-sdata?
          "UNREGISTERED::James Clark//Characteristic::preserve-sdata?"
          #f)

;; Add the META header tags for use with Apple's HelpViewer application.
(define %html-header-tags%
  (list
   (list "META" '("HTTP-EQUIV" "content-type") '("CONTENT" "text/html;charset=iso-8859-1"))
   (list "META" '("NAME" "AppleTitle") '("CONTENT" "Spectro Help"))
   (list "META" '("NAME" "AppleIcon") '("CONTENT" "SpectroHelp/Images/icon16x16.png"))
   (list "META" '("NAME" "AppleFont") '("CONTENT" "Lucida Grande,Helvetica"))
   (list "META" '("NAME" "AppleSearchResultsFont") '("CONTENT" "Lucida Grande,Helvetica"))
   (list "META" '("NAME" "robots") '("CONTENT" "anchors"))))

;; Adds CSS style-sheet support
(define %stylesheet%
  "MusicKit_Help.css")

;; Set to #f to not generate any article titlepage.
(define %generate-article-titlepage%
  #t)

(define (article-titlepage-separator side)
  (make empty-element))

;; put the legal notice in a separate file
(define %generate-legalnotice-link%
  #t)

;; use graphics in admonitions, and have their path be "stylesheet-images"
;; NO: they do not yet look very good
(define %admon-graphics-path%
  "Images/")
(define %admon-graphics%
  #f)
;;(define %admon-graphics%
;;  #t)

;; make funcsynopsis look pretty
(define %funcsynopsis-decoration%
  ;; Decorate elements of a FuncSynopsis?
  #t)

(define %html-ext% ".html")

(define ($shade-verbatim-attr$)
  ;; Make the background color darker than the standard so it is
  ;; easier to see against white text. 
  (list
   (list "BORDER" "0")
   (list "BGCOLOR" "#202020")
   (list "WIDTH" ($table-width$))))

(define %generate-article-toc% 
  ;; Should a Table of Contents be produced for Articles?
  ;; If true, a Table of Contents will be generated for each 'Article'.
  #t)

(define %generate-part-toc% #t)

(define (toc-depth nd)
  ;; more depth (2 levels) to toc; instead of flat hierarchy
  2)

(define %shade-verbatim%
  #t)

(define %use-id-as-filename%
  ;; Use ID attributes as name for component HTML files?
  #t)

(define %graphic-default-extension% "gif")

;; TODO need inlinemediaobject managing image definition

(define %root-filename%
  ;; The filename of the root HTML document is the same as the folder.
  "SpectroHelp")

(element emphasis
  ;; make role=strong equate to bold for emphasis tag
  (if (equal? (attribute-string "role") "strong")
     (make element gi: "STRONG" (process-children))
     (make element gi: "EM" (process-children))))

;; Redefinition of $verbatim-display$
;; Origin: dbverb.dsl
;; Different foreground and background colors for verbatim elements
;; Author: Philippe Martin (feloy@free.fr) 2001-04-07

(define ($verbatim-display$ indent line-numbers?)
  (let ((verbatim-element (gi))
        (content (make element gi: "PRE"
                       attributes: (list
                                    (list "CLASS" (gi)))
                       (if (or indent line-numbers?)
                           ($verbatim-line-by-line$ indent line-numbers?)
                           (process-children)))))
    (if %shade-verbatim%
        (make element gi: "TABLE"
              attributes: (shade-verbatim-attr-element verbatim-element)
              (make element gi: "TR"
                    (make element gi: "TD"
                          (make element gi: "FONT" 
                                attributes: (list
                                             (list "COLOR" (car (shade-verbatim-element-colors
                                                                 verbatim-element))))
                                content))))
        content)))

;;
;; Customize this function
;; to change the foreground and background colors
;; of the different verbatim elements
;; Return (list "foreground color" "background color")
;;
(define (shade-verbatim-element-colors element)
  (case element
    (("SYNOPSIS") (list "#000000" "#6495ED"))
    ;; ...
    ;; Add your verbatim elements here
    ;; ...
    (("SCREEN") (list "#498650" "#000000"))
    (else (list "#000000" "#E0E0E0"))))

(define (shade-verbatim-attr-element element)
  (list
   (list "BORDER" 
	(cond
		((equal? element (normalize "SCREEN")) "1")
		(else "0")))
   (list "BGCOLOR" (car (cdr (shade-verbatim-element-colors element))))
   (list "WIDTH" ($table-width$))))

;; End of $verbatim-display$ redefinition.

;; Redefine header navigation to remove all but the DIV declaration,
;; since it's a styled header without navigation.
;; TODO perhaps just use:
;; (define %header-navigation%
;;   ;; Don't add navigation link to the top of each page.
;;   #t)

(define (default-header-navigation elemnode prev next prevsib nextsib)
  (make element gi: "DIV"
	attributes: '(("CLASS" "NAVHEADER"))
	(empty-sosofo)))

;; End of default-header-navigation redefinition.


;; Redefine menuchoice so that right arrows rather than yucky "->"
(element menuchoice
  (let* ((shortcut (select-elements (children (current-node)) 
                                    (normalize "shortcut")))
         (items    (node-list-filter-by-not-gi
                    (children (current-node))
                    (list (normalize "shortcut")))))
    (make sequence
      (let loop ((nl items) (first? #t))
        (if (node-list-empty? nl)
            (empty-sosofo)
            (make sequence
              (if first?
                  (process-node-list (node-list-first nl))
                  (make sequence
                    (if (or (equal? (gi (node-list-first nl))
                                    (normalize "guimenuitem"))
                            (equal? (gi (node-list-first nl))
                                    (normalize "guisubmenu")))
                        (make sequence
                          (make entity-ref name: "rarr"))
                        (literal "+"))
                    (process-node-list (node-list-first nl))))
              (loop (node-list-rest nl) #f))))
      (if (node-list-empty? shortcut)
          (empty-sosofo)
          (make sequence
            (literal " (")
            (process-node-list shortcut)
            (literal ")"))))))

</style-specification-body>
</style-specification>

<style-specification id="html-online" use="html">
<style-specification-body>

;;; Redefine navigation footer up condition to place an "up" anchor to 
;;; climb out of the manual back to the regular web-page.

;;; This is a bit of kludge to create an "up" navigation anchor for
;;; listing the manual online. It may however (?) cause up anchors
;;; from subsections to be mislabelled.

(define (nav-up? elemnode)
  (let ((up      (parent elemnode))
        (up-text "Leave Spectro Manual"))
    (if (and up-text (not (string=? up-text "")))
        #t
        (if (or (node-list-empty? up)
                (equal? (gi up) (normalize "bookinfo"))
                (equal? (gi up) (normalize "docinfo"))
                (equal? (gi up) (normalize "setinfo")))
            #f
            #t))))

(define (nav-up elemnode)
  (let* ((up      (parent elemnode))
         (up-href "../HowItWorks.html")
         (uplink? (not (node-list-empty? up)))
         (href    (if up-href
                      up-href
                      (if uplink?
                          (href-to up)
                          #f))))
    (if href
        (make element gi: "A"
              attributes: (list
                           (list "HREF" href)
                           (list "ACCESSKEY" "U"))
              (nav-up-sosofo elemnode))
        (nav-up-sosofo elemnode))))

;; Removes check if up is sgml-root-element, allowing us to exit out
;; of whole manual.
(define (nav-up-sosofo elemnode)
  (let* ((up      (parent elemnode))
         (up-text "Leave Spectro Manual"))
    (if (and up-text (not (string=? up-text "")))
        (literal up-text)
        (if (node-list-empty? up)
	    (make entity-ref name: "nbsp")
            (gentext-nav-up up)))))

</style-specification-body>
</style-specification>

<style-specification id="print" use="docbook">
<style-specification-body> 

;; ====================
;; customize the print stylesheet
;; ====================

;; make funcsynopsis look pretty
(define %funcsynopsis-decoration%
  ;; Decorate elements of a FuncSynopsis?
  #t)

;; use graphics in admonitions, and have their path be "."
;; NO: we are not yet ready to use gifs in TeX and so forth
(define %admon-graphics-path%
  "./")
(define %admon-graphics%
  #f)

;; this is necessary because right now jadetex does not understand
;; symbolic entities, whereas things work well with numeric entities.
(declare-characteristic preserve-sdata?
          "UNREGISTERED::James Clark//Characteristic::preserve-sdata?"
          #f)
(define %two-side% #t)

(define %section-autolabel% 
  ;; Are sections enumerated?
  #f)

(define %title-font-family% 
   ;; The font family used in titles
   "Lucida Grande")

(define %body-font-family%
   ;; The font family used in the body text
   "Lucida Grande")

(define %visual-acuity%
  ;; General measure of document text size
  ;; "presbyopic", "normal", "tiny" "large-type"
  "normal")

;; (define %generate-part-toc% #t)

;; (define %block-start-indent% 10pt)

(define %graphic-default-extension% "eps")


</style-specification-body>
</style-specification>

<external-specification id="docbook" document="docbook.dsl">

</style-sheet>

