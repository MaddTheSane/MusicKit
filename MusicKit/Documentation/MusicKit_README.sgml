<!--
The MusicKit README file, in the original DocBook SGML source.

Edit this file, not the HTML, RTF or LaTeX output.

$Id$

(Author attribution below)

The folling entities in DOCTYPE describe the revision tuple and the
exact version tuple of the source code (as a CVS version tag)
this document refers to. Change accordingly to match the source
and binary distributions. Likewise if the distribution web site changes.
-->

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<!entity bibliography        SYSTEM "Publications/PublishedDocumentation.sgml">
<!entity readinglist         SYSTEM "Publications/SuggestedReadingList.sgml">
<!entity mkvers "5.4">
<!entity mkvertuple "5.4.0">
<!entity sndvertuple "2.1.0">
<!entity midisportvertuple "2.0.0">
<!entity mkurl "http://www.musickit.org">
<!entity mkdownload "http://ftp.musickit.org/musickit">
<!entity mkcvsweb "http://cvs.musickit.org">
<!entity soxdownload "http://ftp1.sourceforge.net/sox">
]>

<article id="README">

  <artheader>
    <title>The MusicKit V&mkvers;</title>

<!-- TODO
   Add in the MusicKit icon

   Ok, how do we place a logo for the document in the title?
   <informalfigure>
    <mediaobject>
      <imageobject>
	<imagedata FileRef="MK_icon.eps" format="eps">
      </imageobject>
      <imageobject>
	<imagedata FileRef="MK_icon.png" format="png">
      </imageobject>
      <imageobject>
	<imagedata FileRef=".dir.tiff" format="tiff">
      </imageobject>
    </mediaobject>
  </informalfigure>
-->

    <author>
      <firstname>Leigh</firstname>
      <othername role=mi>M.</othername>
      <surname>Smith</surname>
      <affiliation>
        <orgname>
<ulink url="http://www.tomandandy.com">
	<inlinemediaobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.eps" width=50 depth=30
		     scalefit=1>
	</imageobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.jpg">
	</imageobject>
	<textobject>
	  <phrase>
tomandandy music inc.
</phrase>
        </textobject>
      </inlinemediaobject>
</ulink>
</orgname>
	<address>
          <street>89 Greene Street</street>
          <city>New York</city>,
          <state>NY</state>
          <postcode>10012</postcode>
          <country>USA</country>
          <phone>+1-212-431-3535</phone> 
          <fax>+1-212-431-4115</fax> (Fax)
          <email>leigh@tomandandy.com</email>
        </address>
      </affiliation>
    </author>
    <copyright>
      <year>2000-2001</year>
      <holder>The MusicKit Project</holder>
    </copyright>
    <revhistory>
      <revision>
	<revnumber>$Revision$</revnumber>
	<date>$Date$</date>
      </revision>
    </revhistory>

    <abstract>
      <para>
These are overall comments (incorporating original notes by David
A. Jaffe) and serve as the highest level overview of the
MusicKit &horbar; the &ldquo;README&rdquo;.
      </para>
    </abstract>
  </artheader>

<sect1 id="description">
  <title>Description</title>

  <indexterm>
    <primary>MusicKit</primary>
  </indexterm>

  <para>
The <productname>MusicKit</productname> is an object-oriented software
system for building music, sound, signal processing, and
<acronym>MIDI</acronym> applications.  It has been used in such
diverse commercial applications as music sequencers, computer games,
and document processors.  Professors and students in academia have
used the <productname>MusicKit</productname> in a host of areas,
including music performance, scientific experiments, computer-aided
instruction, and physical modeling.  The
<productname>MusicKit</productname> was the first to unify the
<acronym>MIDI</acronym> and Music V paradigms, thus combining
interaction with generality.  (Music V, written by Max Mathews and
others at Bell Labs four decades ago, was the first widely available
"computer music compiler".)
   </para>

   <para>
The <productname>NeXT</productname>
<productname>MusicKit</productname> was first demonstrated at the 1988
NeXT product introduction and was bundled in
<productname>NeXT</productname> software releases 1.0 and 2.0.
Beginning with <productname>NeXT</productname>'s 3.0 release, the
<productname>MusicKit</productname> was no longer part of the standard
<productname>NeXT</productname> software release.  Instead, it was
being distributed and supported by the Center for Computer Research in
Music and Acoustics (<acronym>CCRMA</acronym>) of Stanford
University. Since 1999 and version 5.0, the most recent releases run
on several more <link linkend="platforms">popular operating
systems</link>.  These releases have been generously supported by my
employer,
<ulink url="http://www.tomandandy.com">
	<inlinemediaobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.eps" width=50 depth=30
		     scalefit=1>
	</imageobject>
	<imageobject>
	  <imagedata fileref="tomandandy_logo.jpg">
	</imageobject>
	<textobject>
	  <phrase>
tomandandy music inc.
</phrase>
        </textobject>
      </inlinemediaobject>
</ulink>
as open source to the community.
   </para>

   <para>
The <link linkend="availability"><productname>MusicKit</productname> Distribution</link> is a
comprehensive package that includes <link linkend=onlinedoco>on-line
documentation</link>, <link linkend=examples>programming
examples</link>, <link linkend=applications>utilities,
applications</link> and sample score documents. The <productname>MusicKit</productname> is
dependent on the <productname>SndKit</productname> distribution, originally written by Stephen
Brandon, and both Framework collections are available at the same
distribution site.
</para>

<para>
Source code is available for everything, with the exception of the
<productname>NeXT</productname> hardware implementation of the
low-level sound and <acronym>DSP</acronym> drivers.  This means researchers and
developers may study the source or even customize the Music Kit and
<acronym>DSP</acronym> Tools to suit their needs.  Enhancements can be committed to the
<link linkend=fixes>CVS repository</link> to have them incorporated
for future releases. Commercial software developers may freely
incorporate and adapt the software to accelerate development of
software products.
</para>

    <sect2 id=features>
      <title>Feature List</title>
      <para>
	The following is a partial list of the highlights of the <productname>MusicKit</productname>
	provided by David Jaffe on his <link linkend=otherlinks>web-page</link>: 
</para>

      <itemizedlist>
	<listitem>
	  <para>
Applicable to composers writing real-time computer music applications.
</para>
	</listitem>
	<listitem>
	  <para>
Applicable to programmers writing cross-platform audio/music applications.
</para>
	</listitem>
	<listitem>
	  <para>
Extensible, high-level object-oriented frameworks that are a super-set
of Music V and <acronym>MIDI</acronym> paradigms.
</para>
	</listitem>
	<listitem>
	  <para>
Written in Objective C and C, using Apple's
<productname>OpenStep/Cocoa</productname> <acronym>API</acronym>, the
<productname>FoundationKit</productname>.
</para>
	</listitem>
        <listitem>
           <para>
Using the Python to Objective C bridge 
<ulink url="http://www.sourceforge.net/projects/pyobjc">PyObjC</ulink>
enables applications and utilities to be written in 
<ulink url="http://www.python.org">Python</ulink>, an interpreted
object-oriented language.
           </para>
        </listitem>
	<listitem>
	  <para>
Functionally comparable (although architecturally dissimilar) to <acronym>JMSL</acronym>
(Java Music Specification Language).
</para>
	</listitem>
	<listitem>
	  <para>
Representation system capable of depicting phrase-level structure such
as legato transitions.
</para>
	</listitem>
	<listitem>
	  <para>
General time management/scheduling mechanism, supporting
synchronization to <acronym>MIDI</acronym> time code.
</para>
	</listitem>
	<listitem>
	  <para>
Efficient real-time synthesis and sound processing, including option
for quadraphonic sound.
</para>
	</listitem>
	<listitem>
	  <para>
Complete support for multiple <acronym>MIDI</acronym> inputs and outputs.
</para>
	</listitem>
	<listitem>
	  <para>
Fully-dynamic DSP resource allocation system with dynamic linking and
loading, on multiple DSPs.
</para>
	</listitem>
	<listitem>
	  <para>
Digital sound I/O from the DSP port with support for serial port
devices by all popular vendors.
</para>
	</listitem>
	<listitem>
	  <para>
Non-real time mode, where the DSP returns data to the application or
writes a sound file.
</para>
	</listitem>
	<listitem>
	  <para>
Suite of <link linkend=applications>applications</link>, including
<application>Ensemble</application> &horbar; an interactive algorithmic
composition and performance environment (including a built-in sampler),
and <application>ScorePlayer</application> &horbar; a Scorefile and standard
 <acronym>MIDI</acronym> file player.
</para>
	</listitem>
	<listitem>
	  <para>
Library of instruments, including <acronym>FM</acronym>, wavetable,
physical modeling and waveshaping synthesis.
</para>
	</listitem>
	<listitem>
	  <para>
Library of unit generators for synthesis and sound processing.
</para>
	</listitem>
	<listitem>
	  <para>
Documentation, programming examples, utilities, including a sound file
mixer, sample rate converter, etc.
</para>
	</listitem>
	<listitem>
	  <para>
ScoreFile, a textual scripting language for music. 
</para>
	</listitem>
        <listitem>
          <para>
Connectable audio processing modules (&ldquo;plugins&rdquo") including
standard audio effects such as reverb.
</para>
        </listitem>
        <listitem>
          <para>
<acronym>MP3</acronym> streaming of audio output to web servers using
the <ulink url=http://www.icecast.org>icecast</url> library. The
portions of the library used are <acronym>LGPL</acronym>, not
<acronym>GPL</acronym> and so do not compromise the
<productname>MusicKit</productname> <link
linkend="license">license</link>
</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id=otherlinks>
      <title>References at Other Sites</title>

      <itemizedlist>
	<listitem>
	  <para>
             <ulink url="http://ccrma-www.stanford.edu/CCRMA/Overview/hardsoftware.html">
                <acronym>CCRMA</acronym>'s <productname>MusicKit</productname> site.
             </ulink>
	   </para>
	</listitem>
	<listitem>
	  <para>
	    <ulink url="http://www.jaffe.com/mk97.html">
                David Jaffe's (the original author) <productname>MusicKit</productname> site.
            </ulink>
	  </para>
	</listitem>
        <listitem>
          <para>
            <ulink url="http://www.eecs.umich.edu/~mrozek/nextmusic/NxtSndMusProgs.html">
               Sound and Music Programs for <productname>NeXTStep</productname>
            </ulink> 
            &horbar; a database outlining where other <productname>MusicKit</productname> and <acronym>DSP</acronym>
            software can be found on the Net.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
    
    <sect2 id=maillist>
      <title><productname>MusicKit</productname> Mail-lists</title>
      <itemizedlist>
	<listitem>
	  <para>
Announcements of new releases are sent to
<email>musickit-announce@lists.sourceforge.net</email>. 
Subscribe to the list by visiting 
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-announce">
http://lists.sourceforge.net/mailman/listinfo/musickit-announce</ulink>.
</para>
	</listitem>

	<listitem>
	  <para>
Discussions on development of the <productname>MusicKit</productname> and notices of updates
committed to the CVS source repository are sent to
<email>musickit-developer@lists.sourceforge.net</email>. 
Subscribe to the list by visiting 
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-developer">
http://lists.sourceforge.net/mailman/listinfo/musickit-developer</ulink>.
</para>
	</listitem>

	<listitem>
	  <para>
Discussions on writing applications using the <productname>MusicKit</productname> (not developing
it) are sent to
<email>musickit-users@lists.sourceforge.net</email>. 
Subscribe to the list by visiting 
<ulink url="http://lists.sourceforge.net/mailman/listinfo/musickit-users">
http://lists.sourceforge.net/mailman/listinfo/musickit-users</ulink>.
</para>
	</listitem>
      </itemizedlist>
      <para>
Don't assume nothing is being done if you don't hear anything for a
while!  The maintainers are usually adding fixes/code, but full
releases are less frequent. The <link linkend=fixes>CVS
repository</link> can be used to track all updates and obtain them as
they are committed by developers.
</para>
    </sect2>

  </sect1>
  <sect1 id="furtherdoco">
    <title>Further Documentation</title>

      <itemizedlist>
	<listitem>
	  <para>
Thorough documentation of classes, applications, usage and concepts are found under the directory
<filename class=directory>
Documentation
</filename> in the source distribution.
</para>
	</listitem>

	<listitem>
	  <para>
The file 
<ulink url=&mkweb;/ChangeLog>
<filename>
Documentation/ChangeLog
</filename>
</ulink>
lists changes and is generated from the CVS logs.
</para>
      </listitem>
    </itemizedlist>

    <sect2 id="onlinedoco">
      <title>Online Documentation</title>
      <itemizedlist>
	<listitem>
	  <para>
<ulink url="&mkurl;/MusicKitConcepts">
<productname>MusicKit</productname> and <productname>SndKit</productname> Concepts
</ulink>
&horbar; Thorough documentation of the <productname>MusicKit</productname> and <productname>SndKit</productname> in operation.
</para>
	</listitem>
	<listitem>
	  <para>
<ulink url="&mkurl;/TutorialClasses">
<productname>MusicKit</productname> Tutorials
</ulink>
&horbar; Tutorial exercises by David A. Jaffe, used in his lecture series.
</para>
	</listitem>
	<listitem>
	  <para>
<ulink url="&mkurl;/MusicKit_README.pdf">
README in <acronym>PDF</acronym>
</ulink>
&horbar; 
This README document in the 
<productname>Adobe Portable Document Format</productname>
(e.g <productname>Acrobat</productname>).
</para>
	</listitem>
	<listitem>
	  <para>
<ulink url="&mkurl;/Frameworks">
Class Documentation
</ulink>
&horbar; Documentation for each module, <productname>C</productname>
function and <productname>Objective-C</productname> class.
</para>
	</listitem>
      </itemizedlist>

      <sect3 id="PublishedPapers">
	<title>Published Papers</title>
	<para>
	Conference papers and lecture slides in
	<acronym>PDF</acronym> or <acronym>HTML</acronym> are listed
	in the <link linkend=bibliography>bibliography</link>.
        </para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="platforms">
    <title>Supported Platforms</title>
    <para>
        The <productname>MusicKit</productname> currently runs on:
</para>
    <table frame=all><title><productname>MusicKit</productname> Supported Platforms</title>
      <tgroup cols=4 colsep=1 rowsep=1>
	<colspec colnum=1 align=left>
	<colspec colnum=2 align=center>
	<colspec colnum=3 align=center>
	<colspec colnum=4 align=center>
	<thead>
	  <row>
	    <entry>Platform</entry>
	    <entry><acronym>MIDI</acronym></entry>
	    <entry>Sound</entry>
	    <entry><acronym>DSP</acronym></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>OpenStep 4.2/m68k (<productname>NeXT</productname>)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	  </row>
	  <row>
	    <entry>OpenStep 4.2/Intel (with ISA 56k card)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	  </row>
	  <row>
	    <entry>Windows 98 (using OpenStep
	    Enterprise, Rhapsody DR2/NT, WebObjects 4.5/NT) (Win2000 untested)</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>MacOS X-Server V1.0-1.2</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>MacOS X</entry>
	    <entry>Y</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	  <row>
	    <entry>Linux/Unix (Using GnuStep, PortAudio/PortMusic)</entry>
	    <entry>N</entry>
	    <entry>Y</entry>
	    <entry>N</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="windows">
      <title>Windows support</title>
      <para>
After much fun with the pinnacle of Microsoft development tools, we
have the <productname>MusicKit</productname> working on Windows9X. The solution was to emulate
the Mach <acronym>MIDI</acronym> device driver with the core layer of
DirectMusic. There is a fairly similar match in functionality between
these API.
</para>
      <para>
The downloadable sound (<acronym>DLS</acronym>) capability of DirectMusic (providing a
<acronym>MIDI</acronym> oriented sample playback <acronym>API</acronym> to PC soundcards)
is also supported when playing to a DirectMusic software
synthesiser. There is minimal but usable support for downloading new
<acronym>DLS</acronym> instruments to the software synthesiser.
</para>
      <para>
While the future of Apple's OpenStep/YellowBox/Cocoa/WebObjects (!)
for Windows support is far from clear, the combination of Gnu
technologies of <ulink url="http://www.gnustep.org">GnuStep</ulink>
and <ulink url="http://www.cygnus.com/cygwin">cygwin</ulink> would
suggest in the near future that Apple's corporate interests will not
dictate whether applications can be deployed on either platform.
</para>
    </sect2>

    <sect2 id="linux">
      <title>Linux support</title>
      <para>
Linux/Unix support using the <ulink
url="http://www.gnustep.org">GnuStep</ulink> library is partially
completed and looking for more volunteers. A performance framework
(<filename>MKPerformSndMIDI_portaudio.framework</filename>) using the
<ulink url="http://www.cs.cmu.edu/~music/portmusic/">PortAudio</ulink>
library has been partially completed, porting the
<productname>MusicKit</productname> to
<productname>Intel</productname>
<productname>Linux</productname>. Streaming sound works, but
<acronym>MIDI</acronym> needs further work, please help! Potentially
other platforms can work (<productname>Solaris</productname>,
<productname>FreeBSD</productname>, <productname>AIX</productname>
etc) if they are supported in the PortAudio library and GnuStep.
</para>
    </sect2>
  </sect1>

  <sect1 id="SupportedLanguages">
    <title>Supported Languages</title>
    <para>
While the <productname>MusicKit</productname> and
<productname>SndKit</productname> have been written in
<productname>Objective C</productname>, this does not limit the
system's use to that language. In particular, the dynamic binding of
<productname>Objective C</productname> enables quite straightforward
bridging to interpreters. This enables a relatively slow but
&ldquo;friendly&rdquo; (i.e interactive) interpreter to benefit from
the speed, multi-threading and feature set of the
<productname>MusicKit</productname> and
<productname>SndKit</productname> architectures.
</para>

    <para>
Examples included in the distribution which are written in other languages
include:
</para>

    <variablelist>
      <varlistentry>
	<term><command>scoreinfo</command></term>
	<listitem>
	  <para>
A command-line tool written in Python to list MIDI channels
(<constant>MK_midiChan</constant>) used by each part in MIDI or
Scorefiles. This requires <ulink
url="http://www.python.org">Python</ulink> and <ulink
url="http://www.sourceforge.net/projects/pyobjc">PyObjC</ulink> to be
installed.
</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1 id="history">
    <title>Contributors, History and Acknowledgements</title>
    <subtitle>(As best as LMS has determined from written acknowledgements)</subtitle>
    <itemizedlist>
      <listitem>
	<para>
The <productname>MusicKit</productname> was designed and implemented by David
	  A. Jaffe <email>david@jaffe.com</email>, and the <acronym>DSP</acronym> computer-music
and array-processing software was designed and implemented by Julius
O. Smith III while at <productname>NeXT</productname>.
The SoundKit (forerunner of the <productname>SndKit</productname>) was designed and implemented by
Lee Boynton.
Their original design appeared in
<citation>JaffeBoynton89</citation>.
</para></listitem>

      <listitem><para>
Michael McNabb brought wave table synthesis to the <productname>MusicKit</productname>
and designed and built a number of <classname>UnitGenerator</classname> and <classname>SynthPatch</classname>
subclasses and contributed the <application>Ensemble</application> application.</para></listitem>

      <listitem><para>Douglas Fulton was responsibile for the
documentation and made substantial design improvements in clarifying
general protocol and the identity and mechanisms of the
classes.</para></listitem>

      <listitem><para>Gregg Kellogg wrote the <acronym>DSP</acronym>, Sound, and
<acronym>MIDI</acronym> device drivers for the <productname>NeXT</productname> which were then maintained by Doug
Mitchell.</para></listitem>

      <listitem><para>John Strawn wrote most of the matrix and array processing
macros.</para></listitem>

      <listitem><para>Dana Massie contributed speech coding, sampling-rate
conversion, and signal conditioning modules for the Sound Kit.</para></listitem>

      <listitem><para>Doug
Keislar helped with testing, developer support, and demos.</para></listitem>

      <listitem><para>
Mike Minnick helped finish the <acronym>DSP</acronym> array processing tools and
wrote most of the programming examples.</para></listitem>

      <listitem><para>Roger Dannenberg influenced
both the <productname>MusicKit</productname> noteTag design and the design of the performance
mechanism (using a data flow discrete simulation
model).</para></listitem>

      <listitem><para>Andy Moorer
helped shape the Envelope strategy, suggested the unit-generator
memory-argument scheme, and provided consultation.</para></listitem>

      <listitem><para>The software of William Schottstaedt and others
at <acronym>CCRMA</acronym> (Stanford University) served as a model
for some of the mechanisms in the <productname>MusicKit</productname>.
</para>
</listitem>

      <listitem><para>James A. Moorer, Perry Cook, 
Rob Poor made code and design contributions
also.</para></listitem>

      <listitem><para>Following <productname>NeXT</productname>'s
release of the source to Stanford in 1994, David did the port to Intel
<productname>NeXTStep</productname> and the
<productname>MPU-401</productname> <acronym>MIDI</acronym> and
<acronym>DSP</acronym> drivers. There were some other bug fix
contributors (acknowledged in code comments).</para></listitem>

      <listitem>
	<para>
Stephen Brandon <email>sbrandon@music.gla.ac.uk</email> did the
initial OpenStep port in early 1998 and the majority of the conversion
work. The <productname>MusicKit</productname> now uses the <productname>SndKit</productname>, written by Stephen Brandon,
rather than the SoundKit for its sound processing.
</para>
      </listitem>

      <listitem>
	<para>
Leigh M. Smith <email>leigh@cs.uwa.edu.au</email>, now
<email>leigh@tomandandy.com</email> fixed bugs and ported the <productname>MusicKit</productname>
and <acronym>MIDI</acronym> drivers to Intel and PowerPC Rhapsody in late 1998 and
reorganised the packages and documentation for MacOS X-Server and in
2000, to various developer previews of MacOS X.  The frameworks were
ported to Windows 98/NT using DirectMusic in 1999.</para></listitem>

      <listitem><para>DirectSound interface code for Windows was
contributed by SKoT McDonald
<email>skot@tomandandy.com</email>.</para></listitem>

      <listitem>
	<para>
Keith Hamel tested and helped in bug fixes for the <productname>MacOS X</productname>
version.
</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="VersionNumbering">
    <title>Version numbering of the <productname>MusicKit</productname></title>

    <para>
Version numbering of the <productname>MusicKit</productname> is as follows.
</para>

    <para>
All versions are numbered in the popular standard GNU nomenclature
<replaceable>V.R.P</replaceable>, referred here as a <emphasis>version
tuple</emphasis>, referring to <replaceable>Version</replaceable>,
<replaceable>Revision</replaceable> and
<replaceable>Patch</replaceable>
respectively. <replaceable>Version</replaceable> refers to major
milestones in a project, such as a complete rewrite or major internal
conversion, major functional improvement etc.
<replaceable>Revision</replaceable>, refers to a minor milestone that
can include new functionality that may break external interfacing
software, forcing them to be updated (minimally a recompile).
<replaceable>Patch</replaceable>, refers to a singular bug fix to
correct operation which does not cause an incompatible change or
introduce new behaviour.
</para>

    <para>
Each framework has it's own version tuple. This is encoded in the
framework and is used by the dynamic loader to verify the correct
versions of applications link against the correct versions of
frameworks. However, to allow new framework with patches to be
installed into operational sites without forcing recompiles of the
application, the version tuple encoded in the framework is of the form
<replaceable>V.R</replaceable>. Therefore a new patched framework can
be installed over the top of the old same numbered framework with the
knowledge it will continue to work.
</para>
  </sect1>

  <sect1 id="license">
    <title>License</title>

    <sect2 id="OriginalMKLicense">
      <title>Original <productname>MusicKit</productname> License</title>
      <para>
The source code as distributed by Stanford (V4.2) included the
following usage message:
</para>

    <blockquote>
      <title>Music Kit Usage</title>
      <para>
The Music Kit software is
distributed free of charge.  Copyright remains with the owner
indicated in each file.   The software may be freely incorporated into
any NeXTstep commercial application, any academic application, or any
musical composition.
</para>
      <para>
We would appreciate your acknowledging the use
of the Music Kit in any academic paper, music program notes and
application documentation that use the Music
Kit.
</para>
    </blockquote>

    </sect2>
    <sect2 id="CurrentMKLicense">
      <title><productname>MusicKit</productname> Usage</title>
    <para>
In regard of version V&mkvertuple;
(consitituting all changes and modifications, porting efforts and
documentation beyond V4.2), the current license follows.
</para>

<para>The <productname>MusicKit</productname> software is distributed free of charge.  Copyright
remains with the owner indicated in each file and copyright of the
modifications to each file remains with the contributor of the
changes. The software in this distribution may be freely incorporated
into any commercial application, any academic application, and public
domain application or any musical composition so long as the
attribution of authorship of the software is retained in the original
source and documentation files.</para>

<para>By sharing your contributions back to the public domain, this
helps others as well as yourself. It is not intended that your changes
be enforced to be returned to the public domain, but it is hoped that
common sense will prevail and that everyone will realise that reward
does not mean avoiding openness.</para>

<para>We (the contributors to the <productname>MusicKit</productname>) would appreciate you
acknowledging the use of the <productname>MusicKit</productname> in any academic paper, music
program notes and application documentation that use the
<productname>MusicKit</productname> or <productname>SndKit</productname>. </para>
    </sect2>
  </sect1>

  <sect1 id=availability>
    <title>Availability</title>
    <para>
The <productname>MusicKit</productname> is listed on the following open source portals:
</para>

    <itemizedlist>
      <listitem>
	<para>
	<ulink url="http://www.sourceforge.net/projects/musickit">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="sourceforge.eps" width=50 depth=30
			   scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="sourceforge.png">
	      </imageobject>

	    </inlinemediaobject>
sourceforge.net
      </ulink>
</para>
      </listitem>
      <listitem>
	<para>
	<ulink url="http://www.freshmeat.net/projects/musickit/">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="freshmeat.eps" width=25 depth=15
			   scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="freshmeat.jpg">
	      </imageobject>
	    </inlinemediaobject>
freshmeat.net
      </ulink>
      </para>
      </listitem>
      <listitem>
	<para>
	<ulink url="http://softrak.stepwise.com/Apps/WebObjects/Softrak.woa/7/wa/displayPackage?package=191&amp;os=10">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="Stepwise.eps" width=50 depth=30 scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="Stepwise.gif">
	      </imageobject>
	    </inlinemediaobject>
SoftTrak on <systemitem class="systemname">stepwise.com</systemitem>
      </ulink>
      </para>
      </listitem>
      <listitem>
	<para>
	<ulink url="http://www.advogato.org/proj/MusicKit%20and%20SndKit/">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="advogato.eps" width=25 depth=15
			   scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="advogato.gif">
	      </imageobject>
	    </inlinemediaobject>
advogato.org
      </ulink>
      </para>
      </listitem>
      <listitem>
	<para>
	<ulink url="http://www.opensourcedirectory.org/projects/musickit/">
	<inlinemediaobject>
	      <imageobject>
		<imagedata fileref="osd.eps" width=25 depth=15
			   scalefit=1>
	      </imageobject>
	      <imageobject>
		<imagedata fileref="osd.gif">
	      </imageobject>
	    </inlinemediaobject>
opensourcedirectory.org
      </ulink>
      </para>
      </listitem>
    </itemizedlist>
    
    <sect2 id=downloads>
      <title>Downloading the Distribution</title>

      <sect3 id=sources>
	<title>Source tarballs</title>
	<para>
The Source files consist of:
</para>
	
	<para>
        <variablelist>
	    <varlistentry>
	      <term>
              <ulink url="&mkdownload;/MK-&mkvertuple;.s.tar.gz">MK-&mkvertuple;.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
The source to <filename>MusicKit</filename>,
<filename>MKDSP</filename>, <filename>MKPerformSndMIDI</filename>,
<filename>MKUnitGenerators</filename> and
<filename>MKSynthPatches</filename> frameworks and all utilites,
applications, documentation and example code.
              </para>
		<para>
This is the most recent revision and patch. Some older revisions are
located at the <ulink url="&mkdownload;">sourceforge site</ulink>
for regression testing.
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
              <ulink url="&mkdownload;/SndKit-&sndvertuple;.s.tar.gz">SndKit-&sndvertuple;.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                The version of the <productname>SndKit</productname> which matches the <productname>MusicKit</productname>.
              </para>
	    </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
              <ulink url="&mkdownload;/ZilogSCCMIDI.s.tar.gz">ZilogSCCMIDI.s.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                The MacOS X-Server V1.0-1.2 <acronym>MIDI</acronym> driver
                source. Probably versions of MacOS X-Server later than
                1.2 will use MacOS X <acronym>MIDI</acronym> plugins.
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
               <ulink url="http://www.tomandandy.com/MusicKit/DriverKitHeaders.tar.gz">DriverKitHeaders.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                NS3.3 headers required to compile a driver on MacOS X-Server. 
              </para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
      </para>
      </sect3>

      <sect3 id=support>
	<title>Supporting Libraries</title>
	<para>
The following libraries need to be compiled and installed to compile
the MK source:
</para>
	<variablelist>
	  <varlistentry>
	    <term>
            <ulink url="&soxdownload;/sox-12.17.tar.gz">sox-12.17.tar.gz</ulink>. 
            </term>
	    <listitem>
	      <para>
              The 
<ulink url="http://www.sourceforge.net/projects/sox">SoX</ulink>
sound tools library provides sound file format conversion.
Newer versions will probably just work.
              </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect3>

      <sect3 id=binaries>
	<title>Binaries</title>
	<para>
          Binaries for the compiled frameworks for various operating
          systems reside on sourceforge as tar'ed .pkg (Apple/NeXT)
          packages. The files include the version number, choose the
          most recent release:
        </para>

        <para>
	<variablelist>
	    <varlistentry>
	      <term>
            <ulink url="&mkdownload;/MK-&mkvertuple;.b.MOX.pkg.tar">MK-&mkvertuple;.b.MOX.pkg.tar</ulink>
            </term>
	      <listitem>
		<para>
              The MacOS X frameworks (including the
              <productname>SndKit</productname>), applications,
              command line tools and documentation.
              </para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>
              <ulink url="&mkdownload;/ZilogSCCMIDI.b.tar.gz">ZilogSCCMIDI.b.tar.gz</ulink>
            </term>
	      <listitem>
		<para>
                The MacOS X-Server <acronym>MIDI</acronym> driver
                binary for SCC UARTs in 8500/8600/9500/9600/G3/G4
                PowerMacs. Note that this driver will not work on
                MacOS X.
              </para>
	      </listitem>
	    </varlistentry>
<!-- TODO
	  <varlistentry>
	    <term>
            <ulink url="&mkdownload;/MK-&mkvertuple;.b.w32.pkg.tar">MK-&mkvertuple;.b.w32.pkg.tar</ulink>
            </term>
	    <listitem>
	      <para>
              The Windows9X/2000 frameworks (including the <productname>SndKit</productname>).
              </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>
            <ulink url="&mkdownload;/MK-&mkvertuple;.b.linux.rpm">MK-&mkvertuple;.b.linux.rpm</ulink>
            </term>
	    <listitem>
	      <para>
              The Linux frameworks (including the <productname>SndKit</productname>).
              </para>
	    </listitem>
	  </varlistentry>
-->
	  </variablelist>
      </para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="appsandexs">
    <title>Included Applications and Example Code</title>

    <sect2 id="applications">
      <title>Applications in the distribution</title>
      <itemizedlist>
	<listitem>    
	  <para><application>ScorePlayer</application> (David Jaffe)</para>
	</listitem>
	<listitem>
	  <para><application>WaveEdit</application> (David Jaffe)</para>
<para>
WaveEdit is an application that makes it possible to display,
edit and listen to wave tables.
</para>
	</listitem>
	<listitem>
	  <para><application>Ensemble</application> (Michael McNabb)</para>
<para>
		Ensemble combines elements of a sequencer, a voicing
			application and an algorithmic composition 
			application. 
</para>

	</listitem>
	<listitem>
	  <para><application>EnvelopeEd</application> (Fernando Lopez Lezcano)</para>
	</listitem>
	<listitem>
	  <para><application>PianoRoll</application> (Jonathan Knudsen)</para>
	</listitem>
	<listitem>
	  <para><application>HosePlayer</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>SlideFlute</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>edsnd</application> (Lee Boynton)</para>
	</listitem>
	<listitem>
	  <para><application>Reich-o-Matic</application> (Brad Garton)</para>
	</listitem>
	<listitem>
	  <para><application>Looching</application> (Brad Garton)</para>
	</listitem>
	<listitem>
	  <para><application>ResoLab</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>ClariNot</application> (Perry Cook)</para>
	</listitem>
	<listitem>
	  <para><application>ResonSound</application> (David Jaffe)</para>
	  <para>
Real time processing of sound from the <acronym>DSP</acronym> serial port.
</para>
	</listitem>
        <listitem>
          <para><application>PatchCord</application> (Leigh Smith)</para>
          <para>
A System Exclusive librarian and patch editor.
</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="examples">
      <title>Example code in the distribution</title>
      <para>
There are two kinds of programming examples.  Programs
with names entirely in lowercase, such as <command>playscorefile</command>, are
command-line programs.  Programs with names beginning with an
uppercase letter, such as <application>PlayNote</application>, are applications
(i.e. graphic-interface programs).
</para>

      <para>
The complete set of programs is listed below.  For further information
on a given programming example, see the README file in its directory.
</para>

      <variablelist>
	<title>Simple command-line programming examples</title>

	<varlistentry>
	  <term><command>playpart</command></term>
	  <listitem>
	    <para>
Create notes algorithmically and play them.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>playscorefile</command></term>
	  <listitem>
	    <para>
Read a scorefile into a <classname>MKScore</classname> and play it on
the <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>playscorefile2</command></term>
	  <listitem>
	    <para>
Read a scorefile and play it on the DSP as it is read.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>playscorefilemidi</command></term>
	  <listitem>
	    <para>
Play scorefile through <acronym>MIDI</acronym> out.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>mixscorefiles</command></term>
	  <listitem>
	    <para>
Mix any number of scorefiles and write the result out.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>process_soundfiles_dsp</command></term>
	  <listitem>
	    <para>
Process a sound file through the <acronym>DSP</acronym>
(non-real-time).  Includes <classname>MKSynthPatch</classname>es for
resonating and enveloping sounds.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>mixsounds</command></term>
	  <listitem>
	    <para>
Soundfile mixer that shows how to make your own
<classname>MKInstrument</classname> (non-real-time).
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>exampleSynthPatch</command></term>
	  <listitem>
	    <para>
Demonstrates how to build a <classname>MKSynthPatch</classname> and play it.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>exampleUnitGenerator</command></term>
	  <listitem>
	    <para>
Demonstrates how to build a <classname>MKUnitGenerator</classname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example1</command></term>
	  <listitem>
	    <para>
Simple <classname>MKNote</classname> and
<classname>MKScore</classname> generation.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example2</command></term>
	  <listitem>
	    <para>
Demonstration of playing <classname>MKNote</classname>s.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example3</command></term>
	  <listitem>
	    <para>
Simple algorithmic melody generation.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example4</command></term>
	  <listitem>
	    <para>
Simple algorithmic melody generation using <classname>MKPart</classname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><command>example5</command></term>
	  <listitem>
	    <para>
Demonstration of <classname>MKUnitGenerator</classname>s.
</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <variablelist>
	<title>Simple application programming examples</title>
	<varlistentry>
	  <term><application>Metronome</application></term>
	  <listitem>
	    <para>
Simple note playing.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiFilePlayback</application></term>
	  <listitem>
	    <para>
Play MIDI files with samples using <classname>MKSamplerInstrument</classname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiEcho</application></term>
	  <listitem>
	    <para>
Take <acronym>MIDI</acronym> in, generate echoes, and send to
<acronym>MIDI</acronym> output.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiLoop</application></term>
	  <listitem>
	    <para>
Take <acronym>MIDI</acronym> input and send it right out
<acronym>MIDI</acronym> again.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiPlay</application></term>
	  <listitem>
	    <para>
Take <acronym>MIDI</acronym> input and play the <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>MidiRecord</application></term>
	  <listitem>
	    <para>
Read <acronym>MIDI</acronym> input into a
<classname>MKScore</classname> obj, write a scorefile.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>PerformerExample</application></term>
	  <listitem>
	    <para>
Adjust algorithmically-generated music playing on <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>PlayNote</application></term>
	  <listitem>
	    <para>
Click a button to play and adjust notes on the <acronym>DSP</acronym>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>QuintProcessor</application></term>
	  <listitem>
	    <para>
Interactive application for the <productname>Ariel</productname>
<productname>QuintProcessor</productname>.
</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><application>SineGen</application></term>
	  <listitem>
	    <para>
Interactively adjust the frequency of a sine wave.
</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>
  </sect1>

  <sect1 id="works">
    <title>What works?</title>
    <para>
The frameworks have been exercised fairly extensively and seem quite
stable. <acronym>MIDI</acronym> recording and playback of scores and computed parts works
on all supported platforms. The application
<application>ScorePlayer</application>, the examples
<application>MidiFilePlayback</application> and
<command>playscorefilemidi</command>, and the utility
<command>playscore</command> demonstrate these capabilities.
</para>

    <sect2 id="installation">
      <title>Installation</title>

<para>
The <application>Installer</application> program will let you choose a
directory in which to place the installation tree.  If you are on a
stand-alone machine, you should be logged in (or running
<application>Installer</application>) as root and choose
&ldquo;<filename class=directory>/</filename>&rdquo; for the
installation directory (the default).
</para>

      <para>
This will cause the frameworks to install into <filename
class=directory>/Local/Library/Frameworks</filename> on
<productname>MacOS X-Server</productname>, <filename
class=directory>/LocalLibrary/Frameworks</filename> on
<productname>OpenStep</productname> and <filename
class=directory>/Library/Frameworks</filename> on <productname>MacOS
X</productname>.  Applications will install in <filename
class=directory>/Local/Apps</filename> on 
<productname>MacOS X-Server</productname>, 
<filename class=directory>/LocalApps</filename> on
<productname>OpenStep</productname>, and
 <filename class=directory>/Applications</filename> on 
<productname>MacOS X</productname>.
Locations for installing GnuStep applications on Linux and Windows
have yet to be determined.
Command line tools and manual pages will install into the 
<filename class=directory>/usr/local</filename> hierarchy on
<productname>Unix</productname> type machines, specifically
<filename class=directory>/usr/local/bin</filename>. Locations for
command line Windows tools have yet to be determined.
</para>

<para>
If you are the system administrator for a NFS shared network, you
probably want to choose a local directory which can be exported and
create symbolic links into that directory on the networked machines.
Alternatively, if you have a single server that exports <filename
class=directory>/Local*</filename> and <filename
class=directory>/usr/local</filename>, simply install the package
there and you're done.
</para>

    </sect2>
    <sect2 id="compilation">
      <title>Compilation</title>

      <para>
At the moment, there is no single <command>make</command> operation to
build the entire source tree. Use
<application>ProjectBuilder</application> or <command>make</command>
on <productname>OpenStep</productname> or <productname>MacOS X Server
V1.X</productname>, and the new <application>Project
Builder</application> or <command>pbxbuild install DSTROOT=/</command> on
<productname>MacOS X</productname>. The steps to build are:
</para>

      <orderedlist>
	<listitem>
	  <para>
Compile and install <command>sox</command> into 
<filename class=directory>/usr/local/lib</filename>.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install the appropriate platform specific
<filename>MKPerformSndMIDI</filename> framework.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install the <filename>SndKit</filename> framework.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install <filename>MKDSP_56k</filename> framework if on
OpenStep, or <filename>MKDSP_Native</filename>
framework if on Windows, MacOS X-Server or MacOS X.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install the <filename>MusicKit</filename> framework.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install <filename>MKUnitGenerators</filename> and
<filename>MKSynthPatches</filename> frameworks if running on
OpenStep. These frameworks won't compile on MacOS X-Server because the
Motorola <command>asm56000</command> and <command>lnk56000</command>
tools are missing. I've asked Apple and Motorola for a MacOS X
port, why don't you also? :-) In theory the 56K assembler runs on
Windows, so it may be possible to run these on Windows, but that is
yet to be tested.
</para>
	</listitem>
	<listitem>
	  <para>
Compile and install applications and examples located in the
directories <filename
class=directory>Applications</filename> and <filename
class=directory>Examples</filename> respectively.
</para>
	</listitem>
        <listitem>
          <para>
Compile and install an appropriate <acronym>MIDI</acronym> driver.
</para>
      <para>
To compile the <productname>MacOS X-Server</productname>
Zilog <acronym>SCC</acronym>
<acronym>MIDI</acronym> driver, some header files are missing.  You
can get them from the <productname>Darwin</productname> distribution
of the <productname>SoundKit</productname> or just copy them from a
<productname>NeXTStep 3.3</productname>/<productname>OpenStep
4.2</productname> system.
</para>

<para>
MacOS X Developer release includes source for a generic
<acronym>USB</acronym> <acronym>MIDI</acronym> driver at
<filename>/Developer/Examples/CoreAudio/MIDI/SampleUSBDriver</filename>.
There is also a driver binary for the <productname
class="Registered">MIDIMan</productname>
<trademark>MIDISPORT</trademark> <acronym>USB</acronym> interfaces for
MacOS X <link linkend="availability">available</link> for download
from <ulink url="http://www.midiman.com">MIDIMan's web page</ulink>
and other vendors may well have drivers available for their hardware.
</para>

	</listitem>
      </orderedlist>

    </sect2>

  </sect1>

  <sect1 id="notworking">
    <title>What doesn't work? / What needs doing?</title>
    <itemizedlist>
      <listitem>
	<para>
The current list of tasks to be done is listed on the 
<systemitem class="systemname">sourceforge</systemitem> 
<ulink url="http://www.sourceforge.net/projects/musickit">Task Manager</ulink>.
</para>
      </listitem>
      <listitem>
	<para>
<acronym>DSP</acronym> on non-56K <acronym>DSP</acronym>
systems. Stephen mentioned he got sound out under OS4.2. However none
of the <acronym>DSP</acronym> drivers have been ported from
<productname>NeXTStep</productname> V3.3 (as they are all
<acronym>ISA</acronym> bus cards and I don't know of a
<acronym>PCI</acronym> <hardware>56K</hardware> card with published
interface specs).
</para>
	<para>
A more fruitful avenue seems to be to convert the unit generators to
the <acronym>MPEG</acronym> Layer 4 structured audio language <ulink
url="http://www.saol.net"><acronym>SAOL</acronym></ulink>
<citation>ScheirerVercoe99</citation> and modify the MKDSP framework
to download to a supporting card or do the emulation using the native
processor.  If emulating with the native processor, it would then be
possible to use <productname>Apple</productname>s
<productname>AltiVec</productname> vector libraries for increased
performance.
</para>
      </listitem>

      <listitem>
	<para>
For this current revision the <filename>.nib</filename>s have been
upgraded to work with <productname>MacOS X</productname> and
<productname>MacOS X-Server</productname> and will not load with
<productname>OpenStep</productname> 4.2. The
<filename>.nib</filename>s which are compatible with
<productname>OpenStep</productname> 4.2 are now named
<filename><replaceable>nibname</replaceable>-openstep.nib</filename>. At
the moment you will need to manually symbolically link these to
compile for <productname>OpenStep</productname> 4.2. Eventually
<productname>Apple</productname>'s
<application>InterfaceBuilder</application> will produce
<acronym>XML</acronym> based nibs which should reduce the
compatibility issue.
</para>
      </listitem>
    </itemizedlist>
  </sect1>
  
  <sect1 id=fixes>
    <title>Contributing Fixes</title>
    <para>
Please! Changes are maintained via an 
<ulink url="&mkcvsweb;/cgi-bin/viewcvs.cgi/musickit">open CVS system</ulink>.
If you send me <email>leigh@tomandandy.com</email> changes I will incorporate
them and check them in. If you are planning to do major work, I can
register you as a developer to provide write access to the CVS server.
</para>

<para>
If you make a <productname>MusicKit</productname> program that you'd like us to consider for
distribution as part of the <productname>MusicKit</productname>, DSP and <productname>SndKit</productname> Distribution, 
please send it to the following address: <email>leigh@tomandandy.com</email>.
We are interested in applications, unit generators, synth patches, etc.
If you do not have e-mail access, you can send media to the address of
the author at the start of this document.
</para>

<para>
If you have discovered a bug, please report it via the
<productname>sourceforge</productname> bug tracker.
</para>
  </sect1>

  <!-- all citations of documentation directly related to the MusicKit -->
  &bibliography;
  <!-- citations of related computer music, DSP publications -->
  &readinglist;

  <ackno>
   <ulink url="http://sourceforge.net">
	<inlinemediaobject>
	<imageobject>
	  <imagedata fileref="sourceforge.eps" width=50 depth=30
		     scalefit=1>
	</imageobject>
	<imageobject>
	  <imagedata fileref="sourceforge.png">
<!--
	<imagedata fileref="http://sourceforge.net/sflogo.php?group_id=9881"
	  width="88"
	  depth="31"
	  align=left>
-->
	</imageobject>
	<textobject>
	  <phrase>SourceForge Logo</phrase>
        </textobject>
      </inlinemediaobject>
SourceForge kindly hosts the <productname>MusicKit</productname>.
   </ulink>
</ackno>
</article>

<!--
Local Variables:
time-stamp-format:"%02d/%02m/%04y"
time-stamp-line-limit:100
time-stamp-start:"<date>"
time-stamp-end:"</date>"
End:
-->

