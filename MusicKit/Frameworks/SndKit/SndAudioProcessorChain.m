////////////////////////////////////////////////////////////////////////////////
//
//  SndAudioProcessorChain.m
//  SndKit
//
//  Created by skot on Tue Mar 27 2001. <skot@tomandandy.com>
//  Copyright (c) 2001 tomandandy music inc.
//
//  Permission is granted to use and modify this code for commercial and non-commercial
//  purposes so long as the author attribution and copyright messages remain intact and
//  accompany all relevant code.
//
////////////////////////////////////////////////////////////////////////////////

#import "SndAudioBuffer.h"
#import "SndAudioProcessor.h"
#import "SndAudioProcessorChain.h"

@implementation SndAudioProcessorChain

////////////////////////////////////////////////////////////////////////////////
// audioProcessorChain
////////////////////////////////////////////////////////////////////////////////

+ audioProcessorChain
{
    SndAudioProcessorChain *pSAPC = [[SndAudioProcessorChain alloc] init];
    return [pSAPC autorelease];
}

////////////////////////////////////////////////////////////////////////////////
// init
////////////////////////////////////////////////////////////////////////////////

- init
{
    [super init];
    if (audioProcessorArray == nil) 
        audioProcessorArray = [[NSMutableArray arrayWithCapacity: 2] retain];
    bBypass = FALSE;
    return self;
}

////////////////////////////////////////////////////////////////////////////////
// dealloc
////////////////////////////////////////////////////////////////////////////////

- (void) dealloc;
{
    [audioProcessorArray release];
    [tempBuffer release];
    [super dealloc];
}

////////////////////////////////////////////////////////////////////////////////
// bypassProcessors
////////////////////////////////////////////////////////////////////////////////

- bypassProcessors: (BOOL) b
{
    bBypass = b;
    return self;
} 

////////////////////////////////////////////////////////////////////////////////
// addAudioProcessor
////////////////////////////////////////////////////////////////////////////////

- addAudioProcessor: (SndAudioProcessor*) proc
{
    [audioProcessorArray addObject: proc];
    return self;
}

////////////////////////////////////////////////////////////////////////////////
// removeAudioProcessor
////////////////////////////////////////////////////////////////////////////////

- removeAudioProcessor: (SndAudioProcessor*) proc
{
    [audioProcessorArray removeObject: proc];
    return self;
}

////////////////////////////////////////////////////////////////////////////////
// processorAtIndex
////////////////////////////////////////////////////////////////////////////////

- (SndAudioProcessor*) processorAtIndex: (int) index
{
    return [audioProcessorArray objectAtIndex: index];
}

////////////////////////////////////////////////////////////////////////////////
// removeAllProcessors
////////////////////////////////////////////////////////////////////////////////

- removeAllProcessors
{
    [audioProcessorArray removeAllObjects];    
    return self;
}

////////////////////////////////////////////////////////////////////////////////
// processBuffer
////////////////////////////////////////////////////////////////////////////////

- processBuffer: (SndAudioBuffer*) buff
{
    if (bBypass)
        return self;
        
    // TODO: make sure temp buffer is in same format and size as buff too.
        
    if (tempBuffer == nil) {
        tempBuffer = [SndAudioBuffer audioBufferWithFormat: [buff format] data: NULL];
        [tempBuffer retain];
    }
    {
        int i, c = [audioProcessorArray count];
        
        for (i=0;i<c;i++) {
            SndAudioProcessor *proc = [audioProcessorArray objectAtIndex: i];
            [proc processReplacingInputBuffer: buff 
                                 outputBuffer: tempBuffer];
            [buff copyData: tempBuffer];
        }
    }
    return self;
}

////////////////////////////////////////////////////////////////////////////////
// processorCount
////////////////////////////////////////////////////////////////////////////////

- (int) processorCount 
{
    return [audioProcessorArray count];
}

////////////////////////////////////////////////////////////////////////////////
// processorArray
////////////////////////////////////////////////////////////////////////////////

- (NSArray*) processorArray
{
    return audioProcessorArray;
}

////////////////////////////////////////////////////////////////////////////////

@end
