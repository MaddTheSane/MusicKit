#!/bin/sh
# $Id$
#
# zsh script to automate the packaging of MusicKit and SndKit source trees from
# the CVS repository ready for download.
#
# Leigh Smith <leigh@tomandandy.com> 2000/1/3
#

# Default distribution is the MusicKit.
DISTNAME=MusicKit
DISTCHECKEDOUTSRCLOC=/tmp/MKSRC
# This allows us to have a different default CVSROOT
MKCVSROOT=:ext:leighsmith@cvs.musickit.sourceforge.net:/cvsroot/musickit
# Salt to taste:
TAR=gnutar
CHGLOGGEN=cvs2cl
TARLOC=/tmp

if [ x_$1 = x_ ]; then
    echo "source shipping script for the ${DISTNAME} projects"
    echo "Usage: $0 version_number [previous_version]\n"
    echo "Where version_number is of the form V.R.P and matches the CVS tag ${DISTNAME}_V-R-P"
    echo "      previous_version is previous version released for generating differential change logs. This is only needed if it can't be determined automatically."
    exit 1;
else
    RELEASE=$1
    PREVRELEASE=$2
fi

if [ $DISTNAME = MusicKit ]; then
    PACKAGENAME=MK
fi

CVSTAG=${DISTNAME}_`echo $RELEASE | tr '.' '-'`

# This is a kludge, we need to return back to where we started
# packageSources from since packageDocumentation expects the SndKit to
# be sitting next to the MusicKit directory. Once SndKit is integrated
# within the MusicKit, we should remove this and just operate from
STARTDIR=$DISTCHECKOUTSRCLOC/$DISTNAME

# Checkout the source tree
echo Checking out $CVSTAG to $DISTCHECKEDOUTSRCLOC
mkdir -p $DISTCHECKEDOUTSRCLOC
cd $DISTCHECKEDOUTSRCLOC
cvs -d $MKCVSROOT -Q checkout -r $CVSTAG $DISTNAME

# unwrap the symbolic links, this will remove the symbolic links wrap file.
# extract out the symlink masquerades to the CWD.
# 
commitdir=$DISTNAME
symlinks=$commitdir/cvs_symbolic_links.tar 
# Because we update the tar file with find, we need an initial near empty tar
# file.
placeholder=$commitdir/cvs_symlink_placeholder

if [ -f $symlinks ]; then
    $TAR xf $symlinks
    rm $placeholder
    rm $symlinks
fi

# build a ChangeLog with spaces between filenames and comments, 
# collected to half-day window, incorporating tags.
cd $DISTCHECKEDOUTSRCLOC/$DISTNAME
$CHGLOGGEN --no-wrap --separate-header --file Documentation/ChangeLog
# copy it so it can be used for generating an announcement.
cp Documentation/ChangeLog $TARLOC/${DISTNAME}_ChangeLog

# This is a representative file, it should change more or less at the
# end of a project.
LASTFILETOCHANGE=Frameworks/$DISTNAME/$DISTNAME.pbproj/project.pbxproj
# LASTFILETOCHANGE=Documentation/MusicKit_README.sgml

# If a previous release was not supplied on the command line determine
# it from the repository.
if [ ${PREVRELEASE}_ = _ ]; then
    # Determine the previous tagged release from a representative file in
    # the repository.
    PREVCVSTAG=`cvs log $LASTFILETOCHANGE | grep ${DISTNAME}_ | sed -n -e "/$CVSTAG/{;n;s/[ \t]*\([^ :]*\): .*/\1/p;}"`
else
    # Use the supplied release number to create a differential ChangeLog.
    PREVCVSTAG=${DISTNAME}_`echo $PREVRELEASE | tr '.' '-'`
fi

# Determine the date of the previous tagged release.
PREVRELEASEDATE=`cvs -f log -N -r$PREVCVSTAG $LASTFILETOCHANGE | awk '/date:/ { print $2 }' | tr / -`

echo Logging changes after $PREVCVSTAG to $CVSTAG, from $PREVRELEASEDATE to now. 

# This is the means to generate what we've done since last release.
$CHGLOGGEN --no-wrap --separate-header --window 86400 --file $TARLOC/${DISTNAME}_ChangeLog_${RELEASE} --log-opts "-d\>$PREVRELEASEDATE"

# Create a readily readable PDF version of the MusicKit_README.sgml file.
# Return to where we started, expecting SndKit source to be
# sitting next to the MusicKit, for headerdoc.
pushd $STARTDIR
Utilities/Packaging/packageDocumentation $TARLOC/${DISTNAME}_ChangeLog $DISTCHECKEDOUTSRCLOC/$DISTNAME
popd

# remove CVS directories (they will be different for each user if checking out direct from the repository).
find $DISTCHECKEDOUTSRCLOC -name CVS -type d -exec rm -r {} \; -prune

cd $DISTCHECKEDOUTSRCLOC
# rename the directory to the current version.
mv $DISTNAME ${DISTNAME}-$RELEASE
# tar up the remaining source
PACKAGEFILE=$TARLOC/${PACKAGENAME}-${RELEASE}.s.tar.gz
$TAR czf $PACKAGEFILE ${DISTNAME}-${RELEASE}

echo Archive generated at $PACKAGEFILE
echo ChangeLog generated at $TARLOC/${DISTNAME}_ChangeLog
echo ChangeLog since $PREVCVSTAG generated at $TARLOC/${DISTNAME}_ChangeLog_${RELEASE}

# blow away the checked out source.
rm -r $DISTCHECKEDOUTSRCLOC

# The user needs to use shipSource to upload to upload.sourceforge.net/incoming
# using ftp.
echo Ready for shipSource to upload files.
